{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","name","value","onClick","bgonClick","onChange","handleBackground","htmlFor","toggleMode","role","TextForm","useState","text","setText","color","backgroundColor","myStyle","setmyStyle","btn","setbtn","style","console","log","heading","rows","event","target","placeholder","newText","toUpperCase","showAlert","toLowerCase","split","items","undefined","slice","myBox","document","getElementById","select","navigator","clipboard","writeText","join","length","Alert","alert","word","lower","charAt","capitalize","msg","App","setmode","setAlert","background","setbackground","setTimeout","about","body","e","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.64c38bc2.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport  './custom.css';\r\n\r\n\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n  \r\n\r\n \r\n  \r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">{props.about}</a>\r\n            </li> */}\r\n            <li className=\"nav-item\">\r\n              <div className=\"form-check\">\r\n                <input className=\"form-check-input nav-link customRadioCss\" type=\"radio\" name=\"flexRadioDefault\" id=\"radio1\" value='blue' onClick={props.bgonClick}  onChange={props.handleBackground}/>\r\n                  <label className=\"form-check-label nav-link\" htmlFor=\"radio1\">\r\n                   blue |\r\n                  </label>\r\n              </div>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <div className=\"form-check\">\r\n                <input className=\"form-check-input nav-link customRadioCss\" type=\"radio\" name=\"flexRadioDefault\" id=\"radio2\" value='red' onClick={props.bgonClick}  onChange={props.handleBackground}/>\r\n                  <label className=\"form-check-label nav-link\" htmlFor=\"radio2\">\r\n                   red |\r\n                  </label>\r\n              </div>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <div className=\"form-check\">\r\n                <input className=\"form-check-input nav-link customRadioCss\" type=\"radio\" name=\"flexRadioDefault\" id=\"radio3\" value='pink' onClick={props.bgonClick}  onChange={props.handleBackground}/>\r\n                  <label className=\"form-check-label nav-link\" htmlFor=\"radio3\">\r\n                   pink |\r\n                  </label>\r\n              </div>\r\n            </li>\r\n          \r\n\r\n          </ul>\r\n\r\n\r\n\r\n\r\n          <div className={`form-check form-switch text-${props.mode === 'dark' ? 'light' : 'dark'}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.mode === 'dark' ? 'light' : 'dark'} mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n\r\n  )\r\n}\r\nNavbar.propTypes = { title: PropTypes.string, about: PropTypes.string }\r\n// Navbar.defaultProps = {\r\n//     title:'default props',\r\n//     about:'default about'\r\n// }","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('');\r\n    const handleUpperClick = () => {\r\n        // console.log('clicked on upper case' + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert('text has been converted in upperCase','success')\r\n    }\r\n// f for event change\r\n    const handleonChange = (event) => {\r\n        setText(event.target.value)   \r\n    }\r\n// f for display text in lower case\r\n    const handleLowerClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert('text has been converted in lowerCase ','success')\r\n    }\r\n// f for display Clear text\r\n    const handleClearClick = () => {\r\n        setText('');\r\n        props.showAlert('text has been clear','success')\r\n       \r\n    }\r\n    // title case\r\n    const handleTitleClick = () => {\r\n    \r\n        // let title = text.split(' ');\r\n        let title = text.split(/[ ]+/); //regular expressions are used if there is 1 or more than one spaces in wors thats why\r\n        let newText = '';\r\n        for (let items of title) {\r\n            if(items[0] !== undefined){\r\n            newText += items[0].toUpperCase() + items.slice(1) + ' ';\r\n            }\r\n            else{\r\n                props.showAlert('in your text there is extra spaces so first use our spaces removal function then use this ','warning')\r\n            }\r\n        }\r\n        setText(newText)\r\n        props.showAlert('text has been coverted in titleCase','success')\r\n    }\r\n    // DarkMode\r\n    const [myStyle, setmyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    })\r\n    const [btn, setbtn] = useState('Enable Light Mode')\r\n    const handleMode = () => {\r\n\r\n\r\n        if (myStyle.color === 'black') {\r\n            setmyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black'\r\n\r\n            })\r\n            console.log('ok');\r\n            setbtn('enable Light Mode')\r\n        } else {\r\n            setmyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n\r\n            })\r\n            setbtn('Enable Dark Mode')\r\n            console.log('white');\r\n        }\r\n\r\n    }\r\n\r\n    // copy to clipBoard\r\n    const handleCopy = ()=>{\r\n        console.log('copy');\r\n        let myBox = document.getElementById('myBox');\r\n        myBox.select();\r\n        navigator.clipboard.writeText(myBox.value)\r\n        props.showAlert('text has been Copied ','success')\r\n        \r\n       \r\n    }\r\n\r\n    // remove extra spaces\r\n    const handleSpaces = ()=>{\r\n        let newText =  text.split(/[ ]+/)\r\n        setText(newText.join(' '))\r\n        props.showAlert('Extra spaces has been removed ','success')\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <button style={myStyle} onClick={handleMode} type=\"submit\" className=\"mx-0 mt-2 btn  btn-outline-dark \">{btn}</button>\r\n                <h1 className={`text-${props.mode === 'dark' ? 'light' : 'dark'}`} >{props.heading} </h1>\r\n            </div>\r\n            <div className='container my-4 py-2' style={myStyle} >\r\n\r\n                \r\n                <form className='my-3'>\r\n                    <div className=\"form-group \">\r\n                        <textarea className=\"form-control\" id=\"myBox\" rows=\"6\" value={text} onChange={handleonChange} placeholder='enter your text'></textarea>\r\n                    </div>\r\n                </form>\r\n                {/* here is the button for the convert text into uppercase */}\r\n                <button type=\"submit\" onClick={handleUpperClick} className=\"mx-3 btn btn-outline-warning\">Convert to Uppercase</button>\r\n                <button type=\"submit\" onClick={handleLowerClick} className=\"mx-3 btn btn-outline-warning\">Convert to Lowercase</button>\r\n                <button type=\"submit\" onClick={handleClearClick} className=\"mx-3 btn btn-outline-warning\">clear</button>\r\n                <button type=\"submit\" onClick={handleTitleClick} className=\"mx-3 btn btn-outline-warning\">Title Case</button>\r\n                <button type=\"submit\" onClick={handleCopy} className=\"mx-3 btn btn-outline-warning\">Copy text</button>\r\n                <button type=\"submit\" onClick={handleSpaces} className=\"mx-3 btn btn-outline-warning\">Remove extra spaces</button>\r\n            </div>\r\n            <div className=\"container\" style={myStyle}>\r\n                <h2>Your text summary</h2>\r\n                <h6>{text.split(' ').length - 1} words and {text.length} characters </h6>\r\n                <h6>{0.08 * text.split(' ').length} minutes take to Read these words</h6>\r\n                <h3 className='mt-5 mb-2'>Preview</h3>\r\n                <p>{text.length>0 ? text:'enter something to preview your text'}</p>\r\n            </div>\r\n           \r\n        </>\r\n    )\r\n}\r\nTextForm.propTypes = { type: PropTypes.string }\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize =(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n       props.alert && <div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n               \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\n\n\n// routers\n\n\n\n\nfunction App() {\n  const [mode, setmode] = useState('light')\n  const [alert, setAlert] = useState(null)\n\n  // for the background\n  const [background, setbackground] = useState('light');\n  const handleBackground = (event) => {\n    setbackground(event.target.value)\n\n  }\n  console.log(background);\n  const bgonClick = (e) => {\n    setbackground(e.target.value);\n\n    document.body.style.background = e.target.value;\n  }\n\n\n\n  const showAlert = (msg, type) => {\n    setAlert({\n      msg: msg,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setmode('dark')\n      document.body.style.backgroundColor = 'grey';\n      showAlert('darkMode has been enabled', 'success');\n      document.title = 'Text Termiator Dark Mode';\n    } else {\n      setmode('light')\n      document.body.style.backgroundColor = 'white';\n      showAlert('lightMode has been enabled', 'success')\n      document.title = 'Text Termiator Light Mode';\n\n    }\n  }\n  return (\n\n    <>\n      {/* <Router>\n        <Navbar title='Terminators ' mode={mode} about=' about' toggleMode={toggleMode} background={background} handleBackground={handleBackground} bgonClick={bgonClick} />\n        <Alert alert={alert} />\n\n\n        <Routes>\n          <Route path=\"/about\" element={<About />}>\n        \n          </Route>\n          <Route path=\"/\" element={<TextForm showAlert={showAlert} heading='Enter your text to analyze' mode={mode} />}>\n\n          </Route>\n        </Routes>\n      </Router> */}\n      <Navbar title='Text Terminators ' mode={mode} about=' about' toggleMode={toggleMode} background={background} handleBackground={handleBackground} bgonClick={bgonClick} />\n      <Alert alert={alert} />\n      <TextForm showAlert={showAlert} heading='Enter your text to analyze' mode={mode} />\n    </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}